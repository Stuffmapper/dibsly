(function() {
  var controllers;

  controllers = angular.module('controllers');

  controllers.controller('GetStuffCtrl', [
    '$scope', '$timeout', '$location', '$window', '$modal','$q',
    '$resource', '$stateParams','ImageService','LocalService', 'LocationService',
    'MapsService','MarkerService', 'UserService', 'AlertService','$rootScope',
    '$http', function($scope, $timeout, $location, $window,
      $modal,$q, $resource,$stateParams,ImageService,LocalService, LocationService,
      MapsService, MarkerService, UserService, AlertService, $rootScope,
      $http) {

       // $SCOPE OBJECTS

      $scope.categories = MarkerService.categories;
      $scope.loading = false;
      $scope.menuHeight = 'menu-0';
      $scope.mapHeight = 'map-0';
      $scope.textSearch = '';
      $scope.search = {};
      var boundingBox;
      var updated = Date.now();

      MarkerService.loadCache()
      .then( function(){
        addMapListeners();
       return  MarkerService.setAll({},{id:'giveStuff'}); })
      .then(function(){ 
        MapsService.getCenter()
        .then(function(coords){
           return updateMarkers(coords);
        })
        .then(function(){
          $scope.mapped = MarkerService.where({status:'new'});
          return  MarkerService.expireMarkers()
        });
      })
 

      // $SCOPE FUNCTIONS



      
      $scope.getStuff = function() {
        return $q.when(state !== 'listening' ? addMapListeners() : state )
        .then(function(){
          return MapsService.getCenter()
          .then(function(center){
            $scope.updateMarkers(center)
            .then(function(){
              MarkerService.setAll({status:'new', state:'editing'}, {temporary:true});//
              $scope.$emit('markersUpdated', function(){})
            });
          });
        });
      };


      $scope.markers = function(hasAttribute, hasNoAttribute){
        return MarkerService.where( hasAttribute, hasNoAttribute );
      };

      $scope.updateGetStuff = function(){  
        var toSearch = [];
        if(!_.isEmpty($scope.textSearch) ) { toSearch.push({ textSearch: $scope.textSearch}) }
        if($scope.search.category !== 'All'){ toSearch.push($scope.search)  };  
        toSearch.push({status:'new'})
        MarkerService.setAll(toSearch, {temporary:true})
        $scope.mapped = MarkerService.where(toSearch, {temporary:true});
      };


      //LISTENERS



      $scope.$on('mapChanged', function(evt, args) {
        //

        updateMarkers(args).then(function(){ $scope.updateGetStuff() })
      });

      //HELPER FUNCTIONS 

      var addMapListeners = function(){
        return MapsService.addMapListener('dragend', getPosition )
        .then( MapsService.addMapListener('idle', getPosition ))
        .then( MapsService.addMapListener('zoom', getPosition )) 
      };

      var getPosition = function(){
        MapsService.getCenter()
        .then( function(center){
          $scope.$emit( 'mapChanged', center )
        }); 
      };

      var updateMarkers = function(coords) {
        var defer = $q.defer();
        //TODO turn 15 into a variable in search
        var box = MapsService.getBoundingBox(coords, 15);
        if (!_.isEqual(boundingBox, box) || Date.now() - updated >= 120000 ){
          updated = Date.now();
          boundingBox = box;
          $http({
            url: '/api/posts/geolocated',
            params: {
              nwLat: box.nw.lat,
              seLat: box.se.lat,
              nwLng: box.nw.lng,
              seLng: box.se.lng
            }
          })
          .success(function(data) {
            console.log("these are markers", data)
            var i, len, marker, ref, results;
            ref = data.posts;
            for (i = 0, len = ref.length; i < len; i++) {
              marker = ref[i];
              if (marker.originalImage === 'missing') {
                marker.originalImage = '<%= asset_path('processing.png')%>';
                marker.image_url = '<%= asset_path('processing.png')%>';
              }
              marker.currentUser = UserService.currentUser;
              MarkerService.setMarker(marker);
            };
            defer.resolve('markers updated')
          });
        } else { defer.resolve('markers not updated') }
        return defer.promise;
      };
    }
  ]);

}).call(this);
