
controllers = angular.module('controllers')



controllers.controller('StuffCtrl', [ '$scope','$timeout','$location','$routeParams','$window','$modal','$resource', 'MapsService','UserService','AlertService', '$http',
 ($scope, $timeout,$location, $routeParams,$window, $modal,$resource, MapsService, UserService, AlertService, $http ) ->
    $scope.UserService = UserService;
    $scope.$watchCollection('UserService',->
        $scope.currentUser = UserService.currentUser
     )
    Marker = $resource('/api/posts/:id', id:'@id' )
    init = ->
      $scope.backup = {}
      UserService.check((data,err)->
        if UserService.currentUser
          mystuff = localStorage.getItem('mystuff' + UserService.currentUser)
          if mystuff
            $scope.mystuff = JSON.parse(mystuff)
      )
    #CONSTANTS

    $scope.attached = false #for attaching files

    $scope.giveflow = {
      1: [ true, 'short-view'],
      2: [false, 'medium-view'],
      3: [false, 'form-view'] }

    $scope.loading = false

    #TODO have this come from the server or keep it locally
    $scope.mapCenter = '47.6097,-122.3331'

    $scope.markers = {} #for the markers and posts

    $scope.menuHeight = 'get-stuff-view'

    $scope.mystuff = {posts:{}, dibs:{}}

    $scope.post = {} #for the details view

    $scope.tabs = { #for viewing the menu
      getStuff: true,
      giveStuff: false,
      myStuff: false,
      details: false ,
      editing: false }

    $scope.toggle = false

    $scope.changeLocation = (id)->
      location = $scope.editItem.marker.getPosition()
      if $scope.editMarker
        $scope.editMarker.setMap(null)
      $scope.editMarker = new google.maps.Marker(
        position: location
        draggable:true,
        map:$scope.map,
        title:$scope.editItem.description,
        icon: '<%= asset_path('green-pin.png')%>')
      updatePost = ->
        $scope.editItem.latitude = $scope.editMarker.getPosition().lat()
        $scope.editItem.longitude = $scope.editMarker.getPosition().lng()
      google.maps.event.addListener($scope.editMarker, 'dragend', updatePost )
      google.maps.event.addListener($scope.editMarker, 'idle', updatePost )
      $scope.map.setZoom(18)
      $scope.map.panTo(location)


    $scope.edit = (id)->
      console.log(id)
      showtab('editing')
      $scope.file = null
      $scope.editItem = $scope.markers[id]
      $scope.current_image = $scope.editItem.image_url


    $scope.giveNext = (id)->
        angular.forEach($scope.giveflow, (value, key) ->
          stat = String(id)
          if key == stat
            $scope.menuHeight = value[1]
            $scope.giveflow[key][0] = true
          else
            $scope.giveflow[key][0] = false
          )

    $scope.getDetails  = (id, origin)->
      $scope.menuHeight = 'get-stuff-view'
      $location.path('/post/' + id, false)
      showtab('details')
      if $scope.markers[id] && origin != 'marker'
        google.maps.event.trigger($scope.markers[id].marker, 'click')
        $scope.stuff = $scope.markers[id]
      else
        Marker.get( {id:id} )
        .$promise.then((post)->
          console.log('hello')
          post.post.viewing = true
          if !$scope.markers[id]
            $scope.markers[id] = post.post
            createMarker(post.post, post.id, $scope.map)
          else
            post.updated_at = new Date(post.updated_at)
            angular.extend($scope.markers[id], post.post )
          $scope.stuff = $scope.markers[id]
          if origin != 'marker'
              google.maps.event.trigger($scope.markers[id].marker, 'click'))

    $scope.getMyStuff = ->
        if $scope.postMarker
          $scope.postMarker.setMap(null)
        if $scope.editMarker
          $scope.editMarker.setMap(null)
        $scope.toggle = false
        $location.path('/', false)
        showtab('myStuff')
        $scope.menuHeight = 'my-stuff-view'
        UserService.check((blank,data)->
          if UserService.currentUser
            $scope.mystuff = {posts:{}, dibs:{}}
            user = data.user
            mystuff = localStorage.getItem('mystuff' + user)
            if mystuff
              $scope.mystuff = JSON.parse(mystuff)
            $http.get( '/api/my-stuff')
            .success(
                (data)->
                    for marker in data.posts
                      $scope.mystuff.posts[marker.id] = marker )
            .then( (data)->
              $http.get( '/api/my-dibs')
              .success((data)->
                for marker in data.posts
                  $scope.mystuff.dibs[marker.id] = marker )
            ).then((data)->
                localStorage.setItem('mystuff' + user, JSON.stringify($scope.mystuff))
            )
          )

    $scope.getStuff = ->
      $scope.toggle = false
      $scope.menuHeight = 'get-stuff-view'
      if $scope.editMarker
        $scope.editMarker.setMap(null)
      if $scope.postMarker
        $scope.postMarker.setMap(null)
      $location.path('/')
      showtab('getStuff')
      angular.forEach($scope.markers, (value,key)->
        value.marker.setMap($scope.map)
        if value.infowindow
          value.infowindow.close($scope.map,value.marker)
      )
      google.maps.event.addListener($scope.map, 'dragend', -> updateMarkers($scope.map) )
      google.maps.event.addListener($scope.map, 'zoom_changed',-> updateMarkers($scope.map) )



    $scope.markGone =(id)->
      post = {status: 'gone'}
      $http.post( "/api/posts/" + id + "/update", post )
      .success ->
        AlertService.add('success', "Marked as gone")
      .error ->
        AlertService.add('warning', "Something went wrong")

    $scope.menuToggle = ->
      $scope.toggle = !$scope.toggle


    $scope.publish = (status) ->
        if UserService.currentUser
          console.log($scope.editItem.id, '173')
          $http.post( "/api/posts/" + $scope.editItem.id + "/update",
              { published: status })
              .success(
                console.log('177')
                $scope.editItem.published = status
                console.log('178')
                if not status
                  console.log('181')
                else
                  console.log('184')
             )
             .error(
              console.log
             )

    $scope.removeDibber = (id, description, postID )->
      report = {description: description}
      $http.post( '/api/dibs/' + id + '/removedib',  {report: report} )
      .success(
        $scope.mystuff.posts[postID]['dibbable'] = true )



    $scope.startMapper = ->
      $scope.toggle = false
      showtab('giveStuff')
      angular.forEach($scope.markers, (value,key)->
        value.marker.setMap(null)
      )
      angular.forEach($scope.giveflow, (value,key)->
        if value[0] == true
          $scope.menuHeight = value[1]
      )
      google.maps.event.clearListeners(  $scope.map, 'dragend')
      google.maps.event.clearListeners( $scope.map, 'zoom_changed')
      callback = -> $scope.postMarker.setMap($scope.map)
      if $scope.postMarker
          $scope.postMarker.setMap($scope.map)
          $scope.map.panTo($scope.postMarker.getPosition())
      else
        updatePostMarker( callback, 6000, $scope.map)

    $scope.submitPost = ->
        $scope.loading = true
        UserService.check((blank,data)->
          if UserService.currentUser
              token = $("meta[name=\"csrf-token\"]").attr("content")
              formdata = new FormData();
              formdata.append('latitude',  if $scope.post.latitude then $scope.post.latitude else $scope.map.getCenter().lat())
              formdata.append('longitude', if $scope.post.longitude then $scope.post.longitude else $scope.map.getCenter().lng() )
              formdata.append('category', $scope.post.category)
              formdata.append('description', $scope.post.description)
              formdata.append('on_the_curb', $scope.post.on_the_curb)
              formdata.append('image', $scope.file);
              $http.post( "/api/posts", formdata, {
                  headers: {'Content-Type': undefined,'X-CSRF-TOKEN':token}
                  transformRequest: angular.identity
                  }).success (data, status, headers, config) ->
                      AlertService.add('success', "You've Posted Your Stuff")
                      $scope.current_image = ''
                      $scope.attached = false
                      $scope.file = {}
                      delete $scope.file
                      $scope.post = {}
                      $scope.loading = false
                      updateMarkers()
                      $scope.postMarker.setMap(null)
                      $scope.giveNext(1)
                      $scope.getDetails(data.post.id)
                  .error (data) ->
                      for key, value of data
                          AlertService.add('danger', key + ' ' + value )
                      $scope.loading = false

          if blank
            console.log(blank)
            AlertService.add('danger', 'Please sign in to continue' )
            $scope.loading = false
            $modal.open
              templateUrl:'signIn.html',
              controller:'SignUpCtrl')



    $scope.updateStuff = ->
        UserService.check(->
          if UserService.currentUser
              formdata = new FormData();
              formdata.append('latitude', $scope.editItem.latitude)
              formdata.append('longitude', $scope.editItem.longitude)
              formdata.append('category', $scope.editItem.category)
              formdata.append('description', $scope.editItem.description)
              formdata.append('on_the_curb', $scope.editItem.on_the_curb)
              if $scope.file
                  formdata.append('image', $scope.file);
                  $scope.loading = true
              $http.post( "/api/posts/" + $scope.editItem.id + "/update" , formdata, {
                  headers: {'Content-Type': undefined}
                  transformRequest: angular.identity
                  }).success (data, status, headers, config) ->
                      if $scope.editMarker
                        $scope.editItem.marker.setPosition($scope.editMarker.getPosition())
                        $scope.editMarker.setMap(null)
                      AlertService.add('success', "Your post has been updated")
                      $scope.attached = false
                      delete $scope.file
                      $scope.loading = false
                      $scope.current_image = ''
                  .error (data) ->
                      for key, value of data
                          AlertService.add('danger', key + ' ' + value )
          else
              AlertService.add('danger', 'Please sign in to continue' )
              $modal.open
                  templateUrl:'signIn.html',
                  controller:'SignUpCtrl')

    $scope.$on("detailsWanted",
      (event, args) ->
        id = args.markerId
        marker = $scope.markers[id]
        if !marker.infowindow
          if !marker.description
            marker.description = ""
          innerContent = "<div ng-non-bindable=''>
                              <div id='siteNotice'></div>
                               <img class='stuff-map-image' src=" + marker.image_url + "></img>
                              <div id='bodyContent'>
                                <p>" + marker.description + "</p>
                              </div>
                            </div>"
          infowindow = new google.maps.InfoWindow(
                      content: innerContent
                    )
          marker.infowindow = infowindow
        angular.forEach($scope.markers, (value, key)->
          if key != String(id)
            if value.infowindow
              value.infowindow.close($scope.map,value.marker)
          else
            marker.infowindow.open($scope.map,value.marker)
          )
        dets = ->
          $scope.getDetails(id, 'marker')
        $timeout(dets ,0))

    $scope.$on("fileSelected",
                (event, args) -> $scope.$apply( ->
                   $scope.attached = true
                   $scope.file = args.file
                   reader = new FileReader();

                   reader.onloadend = ->
                      $scope.$apply( ->
                        $scope.current_image = reader.result;
                        )
                   reader.readAsDataURL(args.file)

                ))

    $scope.$on('mapInitialized', (evt, map) ->
      localMarkers = localStorage.getItem('markers')
      if localMarkers
        angular.forEach(JSON.parse(localMarkers),(value, key) ->
          value.viewing = false
          $scope.markers[key] = new Marker(value)
          createMarker(value, value.id, $scope.map)
        )
      if $routeParams.postId
        $scope.getDetails($routeParams.postId, 'initial')
      self = this
      updateMarkers($scope.map)
      blank = ->
      updatePostMarker( blank, 25000, $scope.map)
      google.maps.event.addListener(map, 'dragend', -> updateMarkers($scope.map) )
      google.maps.event.addListener(map, 'zoom_changed', -> updateMarkers($scope.map) )
      navigator.geolocation.getCurrentPosition((position)->
        current_location = new google.maps.LatLng(position.coords.latitude, position.coords.longitude)
        $scope.$apply(->
          map.panTo(current_location)
          )
        )
      )

    createMarker = (value, key, map)->
        latLng =  new google.maps.LatLng(value.latitude ,value.longitude)
        options =
          zoom: 4
          center:latLng
        value.marker = new google.maps.Marker(
          icon: '<%= asset_path('blue-circle.png')%>'
          position: latLng,
          map: map,
          title: value.description )
        value.visible = true
        value.updated_at = new Date(value.updated_at)
        value.locallyUpdated = Date.now()
        $scope.markers[value.id] = value
        google.maps.event.addListener(value.marker, 'click',->
          $scope.$broadcast( 'detailsWanted', { markerId: value.id })
        )

    showtab = (tab)->
      angular.forEach($scope.tabs, (value, key)->
        if key == tab
          $scope.tabs[key] = true
        else
          $scope.tabs[key] = false )

    updateMarkers = (map)->
      if map
        replacer = (key,value)->
          if key == 'marker' || key == 'infowindow'
            return undefined
          else
            return value
        neBounds = map.getBounds().getNorthEast()
        swBounds = map.getBounds().getSouthWest()
        $http(
          url: '/api/posts/geolocated'
          params:
            neLat: neBounds.lat()
            swLat: swBounds.lat()
            neLng: neBounds.lng()
            swLng: swBounds.lng()
          ).success((data)->
            for marker in data.posts
              if !$scope.markers[marker.id]
                createMarker(marker, marker.id, map)
              else if $scope.markers[marker.id].updated_at < new Date(marker.updated_at)
                console.log("this is a date")
                $scope.markers[marker.id].marker.setMap(null)
                createMarker(marker, marker.id, map)
            localStorage.setItem('markers', JSON.stringify($scope.markers, replacer))
            )




    updatePostMarker = (callback, timeout, map)->
      if map
        self = this
        self.callback = callback
        resetMarker = ->
          if $scope.postMarker
            $scope.postMarker.setMap(null)
        updateMarker = (center)->
          resetMarker()
          $scope.postMarker = new google.maps.Marker(position: center,draggable:true, map:$scope.map,title:'Your Stuff',
          icon: '<%= asset_path('red-pin.png')%>')
          updatePost = ->
            $scope.post.latitude = $scope.postMarker.getPosition().lat()
            $scope.post.longitude = $scope.postMarker.getPosition().lng()
          google.maps.event.addListener($scope.postMarker, 'dragend', updatePost )
          google.maps.event.addListener($scope.postMarker, 'idle', updatePost )
          map.setZoom(12)
          map.panTo(center)
          $scope.post.latitude = $scope.postMarker.getPosition().lat()
          $scope.post.longitude = $scope.postMarker.getPosition().lng()
          $scope.postMarker.setMap(null)
          self.callback()
        centerSuccess = (position)->
          center = new google.maps.LatLng(position.coords.latitude, position.coords.longitude)
          updateMarker(center)
        centerError = ->
          console.log("geolocation not supported or error")
          center = $scope.map.getCenter()
          updateMarker(center)
        geoOptions = {
          enableHighAccuracy: true,
          maximumAge:300000,
          timeout: timeout }
        navigator.geolocation.getCurrentPosition(centerSuccess,centerError, geoOptions)


    init()

])
