
controllers = angular.module('controllers')



controllers.controller('StuffCtrl', [ '$scope','$timeout','$location',
'$routeParams','$window','$modal','$resource', 'MarkerService','UserService',
'AlertService', '$rootScope','$http',
 ($scope, $timeout,$location, $routeParams,$window,
 $modal,$resource,MarkerService, UserService, AlertService, $rootScope, $http ) ->
    $scope.UserService = UserService;
    $scope.$watchCollection('UserService',->
        $scope.currentUser = UserService.currentUser
     )
    $scope.$watchCollection('MarkerService',->
        $scope.markers = MarkerService.markers
     )


    init = ->
      $scope.backup = {}
      UserService.check((data,err)->
        console.log(data)
      )
    #CONSTANTS

    $scope.attached = false #for attaching files

    $scope.giveflow = {
      1: [ true, 'short-view'],
      2: [false, 'give-stuff-view'] }

    $scope.loading = false

    #TODO have this come from the server or keep it locally
    $scope.mapCenter = '47.6097,-122.3331'

    $scope.menuHeight = 'get-stuff-view'

    $scope.mystuff = {posts:{}, dibs:{}}

    $scope.post = {} #for the details view

    $scope.tabs = { #for viewing the menu
      getStuff: true,
      giveStuff: false,
      myStuff: false,
      details: false ,
      editing: false }

    $scope.toggle = false

    $scope.cancelGive = ->
      $scope.loading = false
      $scope.giveNext(1)
      $scope.attached = false
      $scope.file = {}
      delete $scope.file
      $scope.post = {}


    $scope.centerGive = ->
      if window.innerWidth < 600
        console.log('line 61')
        $scope.toggle = true
      $scope.map.panTo($scope.postMarker.getPosition())



    $scope.changeLocation = (id)->
      location = $scope.editItem.marker.getPosition()
      if $scope.editMarker
        $scope.editMarker.setMap(null)
      $scope.editMarker = new google.maps.Marker(
        position: location
        draggable:true,
        map:$scope.map,
        title:$scope.editItem.description,
        icon: '<%= asset_path('green-pin.png')%>')
      updatePost = ->
        $scope.editItem.latitude = $scope.editMarker.getPosition().lat()
        $scope.editItem.longitude = $scope.editMarker.getPosition().lng()
      google.maps.event.addListener($scope.editMarker, 'dragend', updatePost )
      google.maps.event.addListener($scope.editMarker, 'idle', updatePost )
      $scope.map.setZoom(18)
      $scope.map.panTo(location)


    $scope.edit = (id)->
      console.log(id)
      showtab('editing')
      $scope.file = null
      $scope.editItem = MarkerService.markers[id]
      $scope.current_image = $scope.editItem.image_url


    $scope.giveNext = (id)->
        angular.forEach($scope.giveflow, (value, key) ->
          stat = String(id)
          if key == stat
            $scope.menuHeight = value[1]
            $scope.giveflow[key][0] = true
          else
            $scope.giveflow[key][0] = false
          )

    $scope.getDetails  = (id, origin)->
      $scope.menuHeight = 'get-stuff-view'
      $location.path('/post/' + id, false)
      showtab('details')
      if MarkerService.markers[id] && origin != 'marker'
        google.maps.event.trigger(MarkerService.markers[id].marker, 'click')
        $scope.stuff = MarkerService.markers[id]
      else
        MarkerService.updateMarker(id, origin, -> $scope.stuff = MarkerService.markers[id])


    $scope.getMyStuff = ->
        if $scope.postMarker
          $scope.postMarker.setMap(null)
        if $scope.editMarker
          $scope.editMarker.setMap(null)
        $scope.toggle = false
        $location.path('/', false)
        showtab('myStuff')
        $scope.menuHeight = 'my-stuff-view'
        UserService.check((blank,data)->
          if UserService.currentUser
            user = data.user
            $http.get( '/api/my-stuff')
            .success(
                (data)->
                    for marker in data.posts
                      $scope.mystuff.posts[marker.id] = marker )
            .then( (data)->
              $http.get( '/api/my-dibs')
              .success((data)->
                for marker in data.posts
                  $scope.mystuff.dibs[marker.id] = marker )
            )
          )

    $scope.getStuff = ->
      $scope.toggle = false
      $scope.menuHeight = 'get-stuff-view'
      if $scope.editMarker
        $scope.editMarker.setMap(null)
      if $scope.postMarker
        $scope.postMarker.setMap(null)
      $location.path('/')
      showtab('getStuff')
      angular.forEach(MarkerService.markers, (value,key)->
        value.marker.setMap($scope.map)
        if value.infowindow
          value.infowindow.close($scope.map,value.marker)
      )
      google.maps.event.addListener($scope.map, 'dragend', -> updateMarkers($scope.map) )
      google.maps.event.addListener($scope.map, 'zoom_changed',-> updateMarkers($scope.map) )



    $scope.markGone =(id)->
      post = {status: 'gone'}
      $http.post( "/api/posts/" + id + "/update", post )
      .success ->
        AlertService.add('success', "Marked as gone")
      .error ->
        AlertService.add('warning', "Something went wrong")

    $scope.menuToggle = ->
      $scope.toggle = !$scope.toggle


    $scope.publish = (status) ->
        if UserService.currentUser
          console.log($scope.editItem.id, '173')
          $http.post( "/api/posts/" + $scope.editItem.id + "/update",
              { published: status })
              .success(
                console.log('177')
                $scope.editItem.published = status
                console.log('178')
                if not status
                  console.log('181')
                else
                  console.log('184')
             )
             .error(
              console.log
             )

    $scope.removeDibber = (id, description, postID )->
      report = {description: description}
      $http.post( '/api/dibs/' + id + '/removedib',  {report: report} )
      .success(
        $scope.mystuff.posts[postID]['dibbable'] = true )



    $scope.startMapper = ->
      $scope.toggle = false
      showtab('giveStuff')
      angular.forEach(MarkerService.markers, (value,key)->
        value.marker.setMap(null)
      )
      angular.forEach($scope.giveflow, (value,key)->
        if value[0] == true
          $scope.menuHeight = value[1]
      )
      google.maps.event.clearListeners(  $scope.map, 'dragend')
      google.maps.event.clearListeners( $scope.map, 'zoom_changed')
      callback = -> $scope.postMarker.setMap($scope.map)
      if $scope.postMarker
          $scope.postMarker.setMap($scope.map)
          $scope.map.panTo($scope.postMarker.getPosition())
      else
        updatePostMarker( callback, 6000, $scope.map)

    $scope.submitPost = ->
        $scope.loading = true
        UserService.check((blank,data)->
          if UserService.currentUser
              token = $("meta[name=\"csrf-token\"]").attr("content")
              formdata = new FormData();
              formdata.append('latitude',  if $scope.post.latitude then $scope.post.latitude else $scope.map.getCenter().lat())
              formdata.append('longitude', if $scope.post.longitude then $scope.post.longitude else $scope.map.getCenter().lng() )
              formdata.append('category', $scope.post.category)
              formdata.append('description', $scope.post.description)
              formdata.append('on_the_curb', $scope.post.on_the_curb)
              formdata.append('image', $scope.file);
              $http.post( "/api/posts", formdata, {
                  headers: {'Content-Type': undefined,'X-CSRF-TOKEN':token}
                  transformRequest: angular.identity
                  }).success (data, status, headers, config) ->
                      AlertService.add('success', "You've Posted Your Stuff")
                      $scope.cancelGive()
                      updateMarkers()
                      $scope.postMarker.setMap(null)
                      $scope.giveNext(1)
                      post = data.post
                      post.image_url = $scope.current_image
                      post.originalImage = $scope.current_image
                      MarkerService.markers[post.id] = post
                      MarkerService.createMarker(MarkerService.markers[post.id], post.id, $scope.map)
                      $scope.stuff = MarkerService.markers[post.id]
                      $scope.menuHeight = 'get-stuff-view'
                      $location.path('/post/' + post.id, false)
                      showtab('details')

                  .error (data) ->
                      for key, value of data
                          AlertService.add('danger', key + ' ' + value )
                      $scope.loading = false

          if blank
            console.log(blank)
            AlertService.add('danger', 'Please sign in to continue' )
            $scope.loading = false
            $modal.open
              templateUrl:'signIn.html',
              controller:'SignUpCtrl')



    $scope.updateStuff = ->
        UserService.check(->
          if UserService.currentUser
              formdata = new FormData();
              formdata.append('latitude', $scope.editItem.latitude)
              formdata.append('longitude', $scope.editItem.longitude)
              formdata.append('category', $scope.editItem.category)
              formdata.append('description', $scope.editItem.description)
              formdata.append('on_the_curb', $scope.editItem.on_the_curb)
              if $scope.file
                  formdata.append('image', $scope.file);
                  $scope.loading = true
              $http.post( "/api/posts/" + $scope.editItem.id + "/update" , formdata, {
                  headers: {'Content-Type': undefined}
                  transformRequest: angular.identity
                  }).success (data, status, headers, config) ->
                      if $scope.editMarker
                        $scope.editItem.marker.setPosition($scope.editMarker.getPosition())
                        $scope.editMarker.setMap(null)
                      AlertService.add('success', "Your post has been updated")
                      $scope.attached = false
                      delete $scope.file
                      $scope.loading = false
                      $scope.current_image = ''
                  .error (data) ->
                      for key, value of data
                          AlertService.add('danger', key + ' ' + value )
          else
              AlertService.add('danger', 'Please sign in to continue' )
              $modal.open
                  templateUrl:'signIn.html',
                  controller:'SignUpCtrl')

    $rootScope.$on("detailsWanted",
      (event, args) ->
        id = args.markerId
        MarkerService.updateWindow(id)
        angular.forEach(MarkerService.markers, (value, key)->
          if key != String(id)
            if value.infowindow
              value.infowindow.close($scope.map,value.marker)
          else
            value.infowindow.open($scope.map,value.marker))
        dets = ->
          $scope.getDetails(id, 'marker')
        $timeout(dets ,0))

    $scope.$on("fileSelected",
                (event, args) ->
                   $scope.giveNext(2)
                   MAX_WIDTH = 800;
                   MAX_HEIGHT = 600;
                   img = document.createElement('img')
                   canvas = document.createElement('canvas')
                   ctx = canvas.getContext("2d")
                   reader = new FileReader();
                   img.addEventListener("load",->
                     ctx.drawImage(img,0,0)
                     width = img.width
                     height = img.height
                     if (width > height)
                       if (width > MAX_WIDTH)
                         height *= MAX_WIDTH / width;
                         width = MAX_WIDTH
                     else
                       if (height > MAX_HEIGHT)
                         width *= MAX_HEIGHT / height;
                         height = MAX_HEIGHT
                     canvas.width = width
                     canvas.height = height
                     ctx = canvas.getContext("2d")
                     ctx.drawImage(img,0,0, width, height)
                     $scope.$apply( ->
                       console.log(img.height)
                       $scope.attached = true
                       $scope.current_image = canvas.toDataURL("image/png")
                       $scope.file = $scope.current_image ))
                   reader.onload = ->
                    img.src = reader.result
                   reader.readAsDataURL(args.file)
                )


    $scope.$on('mapInitialized', (evt, map) ->
      if $routeParams.postId
        $scope.getDetails($routeParams.postId, 'initial')
      self = this
      MarkerService.setMap($scope.map)
      updateMarkers($scope.map)
      blank = ->
      updatePostMarker( blank, 25000, $scope.map)
      google.maps.event.addListener(map, 'dragend', -> updateMarkers($scope.map) )
      google.maps.event.addListener(map, 'zoom_changed', -> updateMarkers($scope.map) )
      navigator.geolocation.getCurrentPosition((position)->
        current_location = new google.maps.LatLng(position.coords.latitude, position.coords.longitude)
        $scope.$apply(->
          map.panTo(current_location)
          )
        )
      )


    showtab = (tab)->
      angular.forEach($scope.tabs, (value, key)->
        if key == tab
          $scope.tabs[key] = true
        else
          $scope.tabs[key] = false )

    updateMarkers = (map)->
      if map
        neBounds = map.getBounds().getNorthEast()
        swBounds = map.getBounds().getSouthWest()
        $http(
          url: '/api/posts/geolocated'
          params:
            neLat: neBounds.lat()
            swLat: swBounds.lat()
            neLng: neBounds.lng()
            swLng: swBounds.lng()
          ).success((data)->
            for marker in data.posts
              if marker.originalImage =='missing'
                marker.originalImage = '<%= asset_path('processing.png')%>'
                marker.image_url = '<%= asset_path('processing.png')%>'
              if !MarkerService.markers[marker.id]
                MarkerService.createMarker(marker, marker.id, map)
              else if MarkerService.markers[marker.id].updated_at < new Date(marker.updated_at)
                console.log("this is a date")
                MarkerService.markers[marker.id].marker.setMap(null)
                MarkerService.createMarker(marker, marker.id, map)
            )




    updatePostMarker = (callback, timeout, map)->
      if map
        self = this
        self.callback = callback
        resetMarker = ->
          if $scope.postMarker
            $scope.postMarker.setMap(null)
        updateMarker = (center)->
          resetMarker()
          $scope.postMarker = new google.maps.Marker(position: center,draggable:true, map:$scope.map,title:'Your Stuff',
          icon: '<%= asset_path('red-pin.png')%>')
          updatePost = ->
            $scope.post.latitude = $scope.postMarker.getPosition().lat()
            $scope.post.longitude = $scope.postMarker.getPosition().lng()
          google.maps.event.addListener($scope.postMarker, 'dragend', updatePost )
          google.maps.event.addListener($scope.postMarker, 'idle', updatePost )
          map.setZoom(12)
          map.panTo(center)
          $scope.post.latitude = $scope.postMarker.getPosition().lat()
          $scope.post.longitude = $scope.postMarker.getPosition().lng()
          $scope.postMarker.setMap(null)
          self.callback()
        centerSuccess = (position)->
          center = new google.maps.LatLng(position.coords.latitude, position.coords.longitude)
          updateMarker(center)
        centerError = ->
          console.log("geolocation not supported or error")
          center = $scope.map.getCenter()
          updateMarker(center)
        geoOptions = {
          enableHighAccuracy: true,
          maximumAge:300000,
          timeout: timeout }
        navigator.geolocation.getCurrentPosition(centerSuccess,centerError, geoOptions)


    init()

])
