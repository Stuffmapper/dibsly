
controllers = angular.module('controllers')



controllers.controller('StuffCtrl', [ '$scope','$timeout','$window','$modal','$resource', 'MapsService','UserService','AlertService', '$http',
 ($scope, $timeout, $window, $modal,$resource, MapsService, UserService, AlertService, $http ) ->
    $scope.UserService = UserService;
    $scope.$watchCollection('UserService',->
        $scope.currentUser = UserService.currentUser
     )

    Marker = $resource('/posts/:id', id:'@id');
    init = ->

      $scope.viewing = false
      $scope.currentPost = { editing: false, viewing: false}
      $scope.mapCenter = '47.6097,-122.3331'

      $scope.markers = {}
      $scope.mystuff = {posts:{}, dibs:{}}
      $scope.curb_only = false
      $scope.backup = {}
      $scope.tabs = { getStuff: true, giveStuff: false, myStuff: false }
      localMarkers = localStorage.getItem('markers')
      if localMarkers
        angular.forEach(JSON.parse(localMarkers),(value, key) ->
          value.viewing = false
          $scope.markers[key] = new Marker(value)
        )
      UserService.check((blank,data)->
        if data.user
          mystuff = localStorage.getItem('mystuff' + data.user)
          if mystuff
            $scope.mystuff = JSON.parse(mystuff)
      )
    $scope.openMarker = (id) ->
      modalInstance = $modal.open(
        templateUrl: 'post.html',
        controller: 'StufCtrl',
        resolve:
          stuff: ->
            $scope.markers[id]
     )




    $scope.edit = (post)->
      $scope.currentPost = post
      $scope.currentPost.editing =true

    $scope.viewDetails = (post)->
      $scope.currentPost = post
      $scope.currentPost.viewing = true



    $scope.onTheCurb = ->
      for key,marker of $scope.backup
        console.log(marker)
        if marker.on_the_curb ==  $scope.curb_only
          delete $scope.markers[key]
        else
          $scope.markers[key] = marker
      $scope.curb_only = !$scope.curb_only

    createMarker = (value, key)->
      if !value.marker
        latLng =  new google.maps.LatLng(value.latitude ,value.longitude)
        options =
          zoom: 4
          center:latLng
        value.marker = new google.maps.Marker(
          icon: '<%= asset_path('blue-circle.png')%>'
          position: latLng,
          map: $scope.map,
          title: value.description )
        $scope.markers[value.id] = value
        google.maps.event.addListener(value.marker, 'click',->
          value.viewing  = true
          if !value.description
            value.description = ""
          innerContent = "<div ng-non-bindable=''>
                    <div id='siteNotice'></div>
                     <img class='stuff-map-image' src=" + value.image_url + "></img>
                    <div id='bodyContent'>
                      <p>" + value.description + "</p>
                    </div>
                  </div>"
          infowindow = new google.maps.InfoWindow(
            content: innerContent
          )
          infowindow.open($scope.map,value.marker)
          $scope.openMarker(value.id)
          $timeout( (-> infowindow.close($scope.map,value.marker)),4000)
        )


    updateMarkers = ->
      neBounds = $scope.map.getBounds().getNorthEast()
      swBounds = $scope.map.getBounds().getSouthWest()
      $http(
        url: '/posts/geolocated'
        params:
          neLat: neBounds.lat()
          swLat: swBounds.lat()
          neLng: neBounds.lng()
          swLng: swBounds.lng()
        ).success((data)->
          console.log(data)
          for marker in data.posts
            $scope.backup[marker.id] = marker
            if !$scope.markers[marker.id]
              createMarker(marker, marker.id)
          localStorage.setItem('markers', JSON.stringify($scope.backup))
          )

    $scope.$on('mapInitialized', (evt, map) ->
      self = this
      updateMarkers()
      angular.forEach($scope.markers, (value, key)->
        createMarker(value, key)
      )
      google.maps.event.addListener(map, 'dragend', updateMarkers )
      google.maps.event.addListener(map, 'zoom_changed', updateMarkers )
      navigator.geolocation.getCurrentPosition((position)->
        current_location = new google.maps.LatLng(position.coords.latitude, position.coords.longitude)
        $scope.$apply(->
          map.panTo(current_location)
          )
        )
      )
    $scope.markerWindow = (id)->
      $scope.markers[id].viewing = !$scope.markers[id].viewing
      google.maps.event.trigger($scope.markers[id].marker, 'click')

    $scope.post = {}
    $scope.$on("fileSelected",
                (event, args) -> $scope.$apply( ->
                   $scope.file = args.file
                   reader = new FileReader();
                   reader.onload = (event2)->
                     canvas = document.getElementById("sm-thumbnail")
                     ctx = canvas.getContext('2d');
                     img = new Image()
                     img.onload = ->
                       canvas.width = img.width
                       canvas.height = img.height
                       ctx.drawImage(img,0,0)
                     img.src = event2.target.result
                   reader.readAsDataURL(args.file)

                ))


    $scope.loading = false

    $scope.togglemap = (height)->
       angular.element("map").height(height)
       $scope.fullMap = !$scope.fullMap
       google.maps.event.trigger(map, 'resize')
    $scope.getStuff = ->
      $scope.tabs.getStuff = true
      angular.forEach($scope.markers, (value,key)->
        value.marker.setMap($scope.map)
      )
      google.maps.event.addListener($scope.map, 'dragend', updateMarkers )
      google.maps.event.addListener($scope.map, 'zoom_changed', updateMarkers )




    $scope.getMyStuff = ->
        UserService.check((blank,data)->
          if data.user
            user = data.user
            mystuff = localStorage.getItem('mystuff' + user)
            if mystuff
              $scope.mystuff = JSON.parse(mystuff)
            $http.get( '/my-stuff')
            .success(
                (data)->
                    for marker in data.posts
                      $scope.mystuff.posts[marker.id] = marker )
            .then( (data)->
              console.log('getting my dibs')
              $http.get( '/my-dibs')
              .success((data)->
                $scope.mystuff.dibs = data['posts'] )
            ).then((data)->
                localStorage.setItem('mystuff' + user, JSON.stringify($scope.mystuff))
            )
          )


    $scope.markGone =(id)->
      post = {status: 'gone'}
      $http.post( "/posts/" + id + "/update", post )
      .success ->
        AlertService.add('success', "Marked as gone")
      .error ->
        AlertService.add('warning', "Something went wrong")


    $scope.removeDibber = (id, description, postID )->
      report = {description: description}
      $http.post( '/dibs/' + id + '/removedib',  {report: report} )
      .success(  console.log( "number is !", postID)
        $scope.mystuff.posts[postID]['dibbable'] = true )





    $scope.submitPost = ->
        $scope.loading = true
        UserService.check((blank,data)->
          if data.user
              token = $("meta[name=\"csrf-token\"]").attr("content")
              formdata = new FormData();
              formdata.append('latitude',  if $scope.post.latitude then $scope.post.latitude else $scope.map.getCenter().lat())
              formdata.append('longitude', if $scope.post.longitude then $scope.post.longitude else $scope.map.getCenter().lng() )
              formdata.append('category', $scope.post.category)
              formdata.append('description', $scope.post.description)
              formdata.append('on_the_curb', $scope.post.on_the_curb)
              formdata.append('image', $scope.file);
              $http.post( "/posts", formdata, {
                  headers: {'Content-Type': undefined,'X-CSRF-TOKEN':token}
                  transformRequest: angular.identity
                  }).success (data, status, headers, config) ->
                      AlertService.add('success', "You've Posted Your Stuff")
                      canvas = document.getElementById("sm-thumbnail")
                      context = canvas.getContext("2d");
                      context.clearRect(0, 0, canvas.width, canvas.height)
                      $scope.file = null
                      $scope.post = {}
                      $scope.loading = false
                      updateMarkers()
                      $scope.postMarker.setMap(null)
                      $scope.tabs.giveStuff = false
                      $scope.getStuff()
                  .error (data) ->
                      for key, value of data
                          AlertService.add('danger', key + ' ' + value )
                      $scope.loading = false
          else
              AlertService.add('danger', 'Please sign in to continue' )
              $scope.loading = false
              $modal.open
                  templateUrl:'signIn.html',
                  controller:'SignUpCtrl')
    $scope.startMapper = ->
      angular.forEach($scope.markers, (value,key)->
        $scope.markers[key].marker.setMap(null)
      )
      google.maps.event.clearListeners(  $scope.map, 'dragend')
      google.maps.event.clearListeners( $scope.map, 'zoom_changed')
      callback = -> $scope.postMarker.setMap($scope.map)
      if $scope.postMarker
          $scope.postMarker.setMap($scope.map)
      else
        updatePostMarker( callback, 6000)

    updatePostMarker = (callback, timeout)->

      self = this
      self.callback = callback
      resetMarker = ->
        if $scope.postMarker
          $scope.postMarker.setMap(null)
      updateMarker = (center)->
        resetMarker()
        $scope.postMarker = new google.maps.Marker(position: center,draggable:true, map:$scope.map,title:'Your Stuff',icon: '<%= asset_path('red-pin.png')%>')
        updatePost = ->
          $scope.post.latitude = $scope.postMarker.getPosition().lat()
          $scope.post.longitude = $scope.postMarker.getPosition().lng()
        google.maps.event.addListener($scope.postMarker, 'dragend', updatePost )
        google.maps.event.addListener($scope.postMarker, 'idle', updatePost )
        $scope.map.setZoom(12)
        $scope.map.panTo(center)
        $scope.post.latitude = $scope.postMarker.getPosition().lat()
        $scope.post.longitude = $scope.postMarker.getPosition().lng()
        $scope.postMarker.setMap(null)
        callback()
      centerSuccess = (position)->
        center = new google.maps.LatLng(position.coords.latitude, position.coords.longitude)
        updateMarker(center)
      centerError = ->
        console.log("geolocation not supported or error")
        center = $scope.map.getCenter()
        updateMarker(center)
      geoOptions = {
        enableHighAccuracy: true,
        maximumAge:300000,
        timeout: timeout }
      navigator.geolocation.getCurrentPosition(centerSuccess,centerError, geoOptions)

    updatePostMarker(null, 25000)
    init()

])
