(function() {
  var controllers;

  controllers = angular.module('controllers');

  controllers.controller('StuffCtrl', [
    '$scope', '$timeout', '$location', '$routeParams', '$window', '$modal','$q',
    '$resource','$route', 'ImageService','LocalService', 'LocationService','MapsService',
     'MarkerService', 'UserService', 'AlertService','$rootScope', '$http',
     function($scope, $timeout, $location, $routeParams, $window, $modal,$q,
       $resource, $route, ImageService,LocalService, LocationService,MapsService,
       MarkerService, UserService, AlertService, $rootScope, $http) {
      $scope.UserService = UserService;
      $scope.MarkerService = MarkerService;
      $scope.search = {};
      $scope.$watchCollection('UserService', function() {
        return $scope.currentUser = UserService.currentUser;
      });
      $scope.$watchCollection('MarkerService', function() {
        return $scope.mapped = $scope.markers($scope.search)
      });
      var setMenu = function() {
        if($routeParams.menuState){
          $scope.showTab($routeParams.menuState);
        } else if($location.url() == '/' ) {
          var position = MapsService.getCenter()
          $scope.getStuff();
        }
      };
      var loadCache = function(){
        var markers = LocalService.get('markers') ?  JSON.parse(
          LocalService.get('markers')) : undefined ;
        angular.forEach(markers, function(marker, key){
            MarkerService.setMarker(marker)
        })
      };
      
      var init = function() {
        $scope.backup = {};
        UserService.check();
        setMenu();
        if ($routeParams.postId) {
          $scope.getDetails($routeParams.postId);
        }
        loadCache();
        var getPosition = function(){
          MapsService.getCenter()
          .then( function(center){
            $scope.$emit( 'mapChanged', center )
          }); 
        };
        
        $scope.centerMap().then(
          function(){
            MapsService.addMapListener('dragend', getPosition );
          }
        )
      };

      $scope.attached = false;
      $scope.categories = MarkerService.categories;

      $scope.giveState = function(state){ 
        var current = $route.current.next || '1'; 
        return current == state;
      }


      $scope.loading = false;

      $scope.menuHeight = 'menu-0';
      $scope.mapHeight = 'map-0'
      $scope.post = {};
      $scope.tabs = {
        getStuff: [ true, true ],
        giveStuff:[ false,  false ],
        myStuff: [ false, false ],
        details: [ false,  false],
        editing: [ false, false]
      };
      $scope.toggle = false;


      $scope.cancelGive = function() {
        //REVIEW this has changed
        $scope.loading = false;
        $scope.giveNext(1);
        $scope.attached = false;
        $scope.file = {};
        delete $scope.file;
        return $scope.post = {};
      };

      $scope.centerMap = function(){
        var center;
        return LocationService.get().then(
          function(position){
            center = {
              lat: position.coords.latitude,
              lng: position.coords.longitude
            };
            LocalService.set('mapcenter', JSON.stringify(center))
          },
          function(error){
            MapsService.getCenter()
            .then(function (mapcenter){
              center = mapcenter;
            })
          }
         )
         .then( function(){

           return MapsService.panTo(center);})
      }

      $scope.edit = function(id) {
        //TODO -- this needs to be rewritten to accomodate 
        // the current mettod

        $scope.showTab('editing');
        $scope.file = null;
        $scope.editItem = MarkerService.markers[id];
        return $scope.current_image = $scope.editItem.image_url;
      };
      $scope.getDetails = function(id) {
        $rootScope.$broadcast('detailsWanted', {
          markerId: id
        });
      };

      $scope.giveNext = function(id) {
        var stat = String(id);
        $scope.mapHeight = 'map-1-' + stat
        $scope.menuHeight = 'menu-1-' + stat;
         $location.path('/menu/giveStuff/' + stat, false)

        MapsService.resizeMap()
        .then(function(){
          MapsService.panToMarker(MarkerService.markers['giveStuff'].marker)
        })
      };

      $scope.showDetails = function(id){
        $scope.menuHeight = 'menu-details'
        $scope.stuff = MarkerService.markers[id];
        $location.path('/post/' + id, false);
        $scope.showTab('details')
      };
      $scope.markers = function(has, hasnot){
        return MarkerService.where( has, hasnot );
      };
      $scope.myStuff = function() {
        MarkerService.setAll();
        $location.path('/menu/myStuff', false)
        if ($scope.postMarker) {
          $scope.postMarker.setMap(null);
        }
        if ($scope.editMarker) {
          $scope.editMarker.setMap(null);
        }
        $scope.toggle = false;
        return UserService.check()
        .then(
          function (data){
            return $http.get('/api/my-stuff')
              .success(function(data) {
                angular.forEach(data.posts, function(marker) {
                  marker.currentUser = UserService.currentUser;
                  MarkerService.setMarker(marker);
                });
              })
              .error( function(err){ console.log(' Could not get my-stuff')})
          },
          function(err){
            console.log('User not logged in');
          }
        )
        .then( function(){
          if (UserService.currentUser) {
              return $http.get('/api/my-dibs').success(function(data) {
                var i, len, marker, ref, results;
                ref = data.posts;
                results = [];
                for (i = 0, len = ref.length; i < len; i++) {
                  marker = ref[i];
                  marker.currentUser = UserService.currentUser;
                  marker.dibber = UserService.currentUser;
                  MarkerService.setMarker(marker);
                }
                return results;
              });
            }

        })
        .then(function(){ MapsService.resizeMap($scope.map) });
      }
      $scope.images = function(){
        return ImageService.images[$route.current.menuState]
      }
      $scope.getStuff = function() {
        $location.path('/menu/getStuff', false)
        $scope.menuHeight = 'menu-0';
        $scope.mapHeight = 'map-0';
        MapsService.getCenter()
        .then(function(center){
          $scope.updateMarkers(center)
          .then(function(){
            MarkerService.setAll()
           $scope.mapped = $scope.markers();
          });
        });
      };
      $scope.markGone = function(id) {
        var post;
        post = {
          status: 'gone'
        };
        return $http.post("/api/posts/" + id + "/update",
          post).success(function() {
          return AlertService.add('success', "Marked as gone");
        }).error(function() {
          return AlertService.add('warning', "Something went wrong");
        });
      };
      $scope.menuToggle = function() {
        return $scope.toggle = !$scope.toggle;
      };
      $scope.publish = function(status) {
        if (UserService.currentUser) {
          return $http.post("/api/posts/" + $scope.editItem.id + "/update", {
            published: status
          }).success( console.log('success') )
          .error(console.log);
        }
      };
      $scope.removeDibber = function(id, description, postID) {
        var report;
        report = {
          description: description
        };
        return $http.post('/api/dibs/' + id + '/removedib', {
          report: report
        }).success($scope.mystuff.posts[postID]['dibbable'] = true);
      };
      $scope.giveStuff = function() {
        var defer = $q.defer();
        $scope.menuHeight = 'menu-1-1';
        $scope.mapHeight = 'map-1-1';
        MarkerService.clearMarkers('giveStuff');
        var markerSet = MarkerService.markers['giveStuff'];
        var marker = markerSet ? markerSet : {id: 'giveStuff',
         temporary:true,
         updated_at: Date.now(),
         icon: 'giveStuff',
         draggable:true };
        var done = function(defer){
          MarkerService.setMarker(marker)
          var state = $route.current && $route.current.next ? $route.current.next : 1
          $scope.giveNext(state);
          defer.resolve()
        };
        if(!markerSet){
           MapsService.getCenter()
          .then( function(center){
            marker.latitude = center.lat;
            marker.longitude = center.lng;
            done(defer);
          })
        } else { done(defer); }
        return defer.promise;
      };


      $scope.submitPost = function() {
        $scope.loading = true;
        return UserService.check()
          .then(
            function(){
              var formdata, token;
              if (UserService.currentUser) {
                formdata = new FormData();
                angular.forEach(MarkerService.editProperties, function(value){
                  if($scope.post[value]){
                    formdata.append(value, $scope.post[value]);
                  }
                });


                formdata.append('image', $scope.file);
                $http.post("/api/posts", formdata, {
                  headers: {
                    'Content-Type': void 0,
                  },
                  transformRequest: angular.identity
                }).success(function(data, status, headers, config) {
                  var post;
                  AlertService.add('success', "You've Posted Your Stuff");
                  $scope.cancelGive();
                  $scope.giveNext(1);
                  post = data.post;
                  post.image_url = $scope.current_image;
                  post.originalImage = $scope.current_image;
                  MarkerService.setMarker(post);
                  $scope.stuff = MarkerService.markers[post.id];
                  $scope.menuHeight = 'get-stuff-view';
                  $location.path('/post/' + post.id, false);
                  return $scope.showTab('details');
                }).error(function(data) {
                  var key, value;
                  for (key in data) {
                    value = data[key];
                    AlertService.add('danger', key + ' ' + value);
                  }
                  return $scope.loading = false;
                });
              }
            },
            function(err){
              console.log(err);
              AlertService.add('danger', 'Please sign in to continue');
              $scope.loading = false;
              return $modal.open({
                templateUrl: 'signIn.html',
                controller: 'SignUpCtrl'
              });
            }
          )
      };
      $scope.updateStuff = function() {
        return UserService.check()
        .then( function() {
          var formdata;
          if (UserService.currentUser) {
            angular.forEach(MarkerService.editProperties, function(value){
              if($scope.editItem[value]){
                formdata.append(value, $scope.editItem[value]);
              }
            });
            if ($scope.file) {
              formdata.append('image', $scope.file);
              $scope.loading = true;
            }
          return $http.post("/api/posts/" + $scope.editItem.id + "/update", formdata, {
            headers: {
              'Content-Type': void 0
            },
            transformRequest: angular.identity })
            .success(function(data, status, headers, config) {
              if ($scope.editMarker) {
                $scope.editItem.marker.setPosition($scope.editMarker.getPosition());
                $scope.editMarker.setMap(null);
              }
              AlertService.add('success', "Your post has been updated");
              $scope.attached = false;
              delete $scope.file;
              $scope.loading = false;
              return $scope.current_image = '';})
            .error(function(data) {
              var key, results, value;
              results = [];
              for (key in data) {
                value = data[key];
                results.push(AlertService.add('danger', key + ' ' + value));
              }
            });
          }
        },
        function(){
          AlertService.add('danger', 'Please sign in to continue');
          $modal.open({
            templateUrl: 'signIn.html',
            controller: 'SignUpCtrl'
           });
         }
        );
      };


      var detailsTimes = 0;

      $rootScope.$on("detailsWanted", function(event, args) {
          detailsTimes += 1;
          var id = args.markerId;
          MarkerService.updateWindow(id);
          MarkerService.clearWindows(id, $scope.map)
          $scope.showDetails(id);
          // $scope.$apply( function(){
          //   $scope.showDetails(id);
          // })
        });

      $scope.$on("fileSelected", function(event, args) {
        ImageService.createGroup(args)
        .then(function(){ $scope.giveNext(2); })
      });

      $scope.$on('mapChanged', function(evt, args) {
        console.log('the map has changed', args)
        $scope.updateMarkers(args);
      });


      //calls the function related to the tab
      //if it is a function otherwise will
      //not call a function (i.e. for edit and details).
      $scope.showTab = function(tab) {
        var original;
        angular.forEach($scope.tabs, function(value, key){
          //resets all the tabs
          if(value[1]){
            original = key;
          }
          $scope.tabs[key][1] = false;
          $scope.tabs[key][0] = false;
        });
        //sets correct states
        $scope.tabs[tab][1] = true;
        $scope.tabs[tab][0] = true;
        if (tab === 'details') {
          $scope.tabs['details'][1] = false;
          $scope.tabs[original][1] = true;
        }
        //calls corresponding function if exits
        if(typeof $scope[tab] === 'function'){ $scope[tab]() }
        MapsService.resizeMap();
      };
      $scope.updateMarkers = function(coords) {
        var defer = $q.defer();
        var box = MapsService.getBoundingBox(coords, 15);
        $http({
          url: '/api/posts/geolocated',
          params: {
            nwLat: box.nw.lat,
            seLat: box.se.lat,
            nwLng: box.nw.lng,
            seLng: box.se.lng
          }
        })
        .success(function(data) {
          var i, len, marker, ref, results;
          ref = data.posts;
          for (i = 0, len = ref.length; i < len; i++) {
            marker = ref[i];
            if (marker.originalImage === 'missing') {
              marker.originalImage = '<%= asset_path('processing.png')%>';
              marker.image_url = '<%= asset_path('processing.png')%>';
            }
            marker.currentUser = UserService.currentUser;
            MarkerService.setMarker(marker);
          };
          defer.resolve('markers updated')
        });
        return defer.promise;
      };
      init();

    }
  ]);

}).call(this);
