(function() {
  var controllers;

  controllers = angular.module('controllers');

  controllers.controller('StuffCtrl', [
    '$scope', '$timeout', '$location', '$routeParams', '$window', '$modal', '$resource', 'ImageService',
    'LocalService', 'LocationService','MapsService', 'MarkerService', 'UserService', 'AlertService',
    '$rootScope', '$http', function($scope, $timeout, $location, $routeParams, $window, $modal, $resource,
      ImageService,LocalService, LocationService,MapsService, MarkerService, UserService, AlertService, $rootScope, $http) {
      var init, updateMarkers, updatePostMarker;
      $scope.UserService = UserService;
      $scope.MarkerService = MarkerService;
      $scope.search = {};
      $scope.$watchCollection('UserService', function() {
        return $scope.currentUser = UserService.currentUser;
      });
      $scope.$watchCollection('MarkerService', function() {
        return $scope.mapped = $scope.markers($scope.search)
      });
      var setMenu = function() {
        if($routeParams.menuState){
          $scope.showtab($routeParams.menuState);
        } else if($location.url() == '/' ) {
          var position = MapsService.getCenter($scope.map)
          $scope.getStuff();
        }
      };
      var loadCache = function(){
        var markers = LocalService.get('markers') ?  JSON.parse( LocalService.get('markers')) : undefined ;
        angular.forEach(markers, function(marker, key){
            MarkerService.setMarker(marker)
        })
      };
      loadCache();

      var init = function() {
        $scope.backup = {};
        UserService.check();
        setMenu();
      };
      $scope.attached = false;
      $scope.categories = MarkerService.categories;

      $scope.giveflow = {
        1: [true, ''],
        2: [false, '']
      };
      $scope.loading = false;
      $scope.mapCenter = LocalService.get('mapcenter') || '47.6097,-122.3331';
      $scope.menuHeight = 'menu-0';
      $scope.mapHeight = 'map-0'
      $scope.post = {};
      $scope.tabs = {
        getStuff: [ true, '' ],
        giveStuff:[ false,  '' ],
        myStuff: [ false, '' ],
        details: [ false,  ''],
        editing: [ false, '']
      };
      $scope.toggle = false;


      $scope.cancelGive = function() {
        $scope.loading = false;
        $scope.giveNext(1);
        $scope.attached = false;
        $scope.file = {};
        delete $scope.file;
        return $scope.post = {};
      };

      $scope.centerMap = function(){
        var center;

        return LocationService.get().then(
          function(position){
            center = {lat: position.coords.latitude, lon: position.coords.longitude };
            LocalService.set('mapcenter', position.coords.latitude + ',' + position.coords.longitude )
          },
          function(error){
            center = MapsService.getCenter($scope.map);
          }
         )
         .then( function(){
           MapsService.panTo($scope.map, center);})
      }

      $scope.edit = function(id) {
        //TODO
        $scope.showtab('editing');
        $scope.file = null;
        $scope.editItem = MarkerService.markers[id];
        return $scope.current_image = $scope.editItem.image_url;
      };
      $scope.giveNext = function(id) {
        return angular.forEach($scope.giveflow, function(value, key) {
          var stat;
          stat = String(id);
          $scope.mapHeight = 'map-1-' + stat
          $scope.menuHeight = 'menu-1-' + stat
          if (key === stat) {
            $location.path('/menu/giveStuff/' + stat, false);
            return $scope.giveflow[key][0] = true;
          } else {
            return $scope.giveflow[key][0] = false;
          }
        });
      };
      $scope.getDetails = function(id, origin) {
        $location.path('/post/' + id, false);
        if (MarkerService.markers[id] && origin !== 'marker') {
          MapsService.triggerMarkerEvent(MarkerService.markers[id].marker, 'click' );
          return $scope.stuff = MarkerService.markers[id];
        } else {
          return MarkerService.updateMarker(id, origin, function() {
            return $scope.stuff = MarkerService.markers[id];
          });
        }
      };
      $scope.markers = function(has, hasnot){
        return MarkerService.where( has, hasnot );
      };
      $scope.myStuff = function() {
        MarkerService.setAll($scope.map);
        $location.path('/menu/myStuff', false)
        if ($scope.postMarker) {
          $scope.postMarker.setMap(null);
        }
        if ($scope.editMarker) {
          $scope.editMarker.setMap(null);
        }
        $scope.toggle = false;
        return UserService.check()
        .then(
          function (data){
            return $http.get('/api/my-stuff')
              .success(function(data) {
                angular.forEach(data.posts, function(marker) {
                  marker.currentUser = UserService.currentUser;
                  MarkerService.setMarker(marker);
                });
              })
              .error( function(err){ console.log(' Could not get my-stuff')})
          },
          function(err){
            console.log('User not logged in');
          }
        )
        .then( function(){
          if (UserService.currentUser) {
              return $http.get('/api/my-dibs').success(function(data) {
                var i, len, marker, ref, results;
                ref = data.posts;
                results = [];
                for (i = 0, len = ref.length; i < len; i++) {
                  marker = ref[i];
                  marker.currentUser = UserService.currentUser;
                  marker.dibber = UserService.currentUser;
                  MarkerService.setMarker(marker);
                }
                return results;
              });
            }

        });
      }
      $scope.images = function(){
        return ImageService.images[$routeParams.menuState]
      }
      $scope.getStuff = function() {
        $location.path('/menu/getStuff', false)
        $scope.menuHeight = 'menu-0';
        $scope.mapHeight = 'map-0';
        $scope.updateMarkers($scope.map);
        MarkerService.setAll($scope.map);
        $scope.mapped = $scope.markers();
      };
      $scope.markGone = function(id) {
        var post;
        post = {
          status: 'gone'
        };
        return $http.post("/api/posts/" + id + "/update", post).success(function() {
          return AlertService.add('success', "Marked as gone");
        }).error(function() {
          return AlertService.add('warning', "Something went wrong");
        });
      };
      $scope.menuToggle = function() {
        return $scope.toggle = !$scope.toggle;
      };
      $scope.publish = function(status) {
        if (UserService.currentUser) {
          return $http.post("/api/posts/" + $scope.editItem.id + "/update", {
            published: status
          }).success( console.log('success') )
          .error(console.log);
        }
      };
      $scope.removeDibber = function(id, description, postID) {
        var report;
        report = {
          description: description
        };
        return $http.post('/api/dibs/' + id + '/removedib', {
          report: report
        }).success($scope.mystuff.posts[postID]['dibbable'] = true);
      };
      $scope.giveStuff = function() {
        $scope.menuHeight = 'menu-1-1';
        $scope.mapHeight = 'map-1-1';
        MarkerService.clearMarkers('giveStuff', $scope.map );
        var state = $routeParams.next ? $routeParams.next : 1
        $scope.giveNext(state);
        var markerSet = MarkerService.markers['giveStuff'];
        var marker = markerSet ? markerSet : {id: 'giveStuff'};
        console.log('marker set?', markerSet);
        if(!markerSet){
          var center = MapsService.getCenter($scope.map);
          LocationService.get()
          .then(
            function(position){
              console.log('223');
              center = MapsService.newLatLng(position.coords.latitude, position.coords.longitude);
            },
            function(err){ console.log('geolocation not supported') })
          .then( function() {
            console.log('we are at line 227 stuffcontroller');
            angular.extend( marker, { latitude: center.lat, longitude: center.lon, icon: 'giveStuff', draggable: true });
            MarkerService.setMarker(marker);
          })
        } //else panto the marker
      };

      $scope.submitPost = function() {
        $scope.loading = true;
        return UserService.check()
          .then(
            function(){
              var formdata, token;
              if (UserService.currentUser) {
                formdata = new FormData();
                angular.forEach(MarkerService.editProperties, function(value){
                  if($scope.post[value]){
                    formdata.append(value, $scope.post[value]);
                  }
                });
                formdata.append('image', $scope.file);
                $http.post("/api/posts", formdata, {
                  headers: {
                    'Content-Type': void 0,
                  },
                  transformRequest: angular.identity
                }).success(function(data, status, headers, config) {
                  var post;
                  AlertService.add('success', "You've Posted Your Stuff");
                  $scope.cancelGive();
                  updateMarkers();
                  $scope.giveNext(1);
                  post = data.post;
                  post.image_url = $scope.current_image;
                  post.originalImage = $scope.current_image;
                  MarkerService.setMarker(post);
                  $scope.stuff = MarkerService.markers[post.id];
                  $scope.menuHeight = 'get-stuff-view';
                  $location.path('/post/' + post.id, false);
                  return $scope.showtab('details');
                }).error(function(data) {
                  var key, value;
                  for (key in data) {
                    value = data[key];
                    AlertService.add('danger', key + ' ' + value);
                  }
                  return $scope.loading = false;
                });
              }
            },
            function(err){
              console.log(err);
              AlertService.add('danger', 'Please sign in to continue');
              $scope.loading = false;
              return $modal.open({
                templateUrl: 'signIn.html',
                controller: 'SignUpCtrl'
              });
            }
          )
      };
      $scope.updateStuff = function() {
        return UserService.check()
        .then( function() {
          var formdata;
          if (UserService.currentUser) {
            angular.forEach(MarkerService.editProperties, function(value){
              if($scope.editItem[value]){
                formdata.append(value, $scope.editItem[value]);
              }
            });
            if ($scope.file) {
              formdata.append('image', $scope.file);
              $scope.loading = true;
            }
          return $http.post("/api/posts/" + $scope.editItem.id + "/update", formdata, {
            headers: {
              'Content-Type': void 0
            },
            transformRequest: angular.identity })
            .success(function(data, status, headers, config) {
              if ($scope.editMarker) {
                $scope.editItem.marker.setPosition($scope.editMarker.getPosition());
                $scope.editMarker.setMap(null);
              }
              AlertService.add('success', "Your post has been updated");
              $scope.attached = false;
              delete $scope.file;
              $scope.loading = false;
              return $scope.current_image = '';})
            .error(function(data) {
              var key, results, value;
              results = [];
              for (key in data) {
                value = data[key];
                results.push(AlertService.add('danger', key + ' ' + value));
              }
            });
          }
        },
        function(){
          AlertService.add('danger', 'Please sign in to continue');
          $modal.open({
            templateUrl: 'signIn.html',
            controller: 'SignUpCtrl'
           });
         }
        );
      };
      $rootScope.$on("detailsWanted", function(event, args) {
        var dets, id;
        id = args.markerId;
        MarkerService.updateWindow(id);
        angular.forEach(MarkerService.markers, function(value, key) {
          if (key !== String(id)) {
            if (value.infowindow) {
              return value.infowindow.close($scope.map, value.marker);
            }
          } else {
            return value.infowindow.open($scope.map, value.marker);
          }
        });
        dets = function() {
          return $scope.getDetails(id, 'marker');
        };
        return $timeout(dets, 0);
      });

      $scope.$on("fileSelected", function(event, args) {
        $scope.giveNext(2);
        ImageService.createGroup(args)
      });

      $scope.$on('mapChanged', function(evt, args) {
        $scope.updateMarkers(args);
      });

      $scope.$on('mapInitialized', function(evt, map) {
        if($routeParams.menuState !== 'giveStuff'){
          MarkerService.setAll($scope.map )
        }
        if ($routeParams.postId) {
          $scope.getDetails($routeParams.postId, 'initial');
        }
        var getPosition = function(){
           $scope.$emit( 'mapChanged', MapsService.getCenter($scope.map) )
        };
        $scope.centerMap()
        MapsService.addMapListener($scope.map, 'dragend', getPosition );
        init();

      });
      $scope.showtab = function(tab) {
        return angular.forEach($scope.tabs, function(value, key) {
          if (key === tab) {
            $scope.tabs[key][0] = true;

            if(typeof $scope[key] == 'function'){
              $scope[key]();
            };
          } else {
            return $scope.tabs[key][0] = false;
          }
        });
      };
      $scope.updateMarkers = function(coords) {
        var box = MapsService.getBoundingBox(coords, 15);
        return $http({
          url: '/api/posts/geolocated',
          params: {
            nwLat: box.nw.lat,
            seLat: box.se.lat,
            nwLng: box.nw.lon,
            seLng: box.se.lon
          }
        })
        .success(function(data) {
          var i, len, marker, ref, results;
          ref = data.posts;
          for (i = 0, len = ref.length; i < len; i++) {
            marker = ref[i];
            if (marker.originalImage === 'missing') {
              marker.originalImage = '<%= asset_path('processing.png')%>';
              marker.image_url = '<%= asset_path('processing.png')%>';
            }
            marker.currentUser = UserService.currentUser;
            MarkerService.setMarker(marker);
          };
        });
      };

    }
  ]);

}).call(this);
