(function() {
  var factories;

  factories = angular.module('factories');

  factories.factory('MapsService',[ '$timeout', '$q','LocalService', function($timeout, $q, LocalService) {
    var self = this;
    self.mapStatus = 'new';
    self.queue = [];

    var emptyQueue = function(map){
      //resolves the queue of promises with the map object
      while(self.queue.length > 0){
        var def = self.queue.pop()
        def.resolve(map)
      };
    };

    self.getMap = function(){
      var deferred = $q.defer()
      self.queue.push(deferred);
      if(self.mapStatus != 'loading'){
        self.initializeOrGetMap()
      }
      return deferred.promise;
    };
    self.initializeOrGetMap = function(){
      if(self.map){
        emptyQueue(self.map);
      } else {
        self.mapStatus = 'loading';
        var center = LocalService.getJSON('mapcenter') ||  {lat: '47.6097' , lng: '-122.3331' };
        google.load("maps", "3.21", {other_params:'key=AIzaSyC9wZTqNMPxl86PtJuR4Dq3TzS_hByOs3U',
          callback: function(){
            map = new google.maps.Map(document.getElementById('google-map'), {
              center: center ,
              zoom: 15
            }),
            self.map = map;
            self.mapStatus = 'loaded'
            emptyQueue(map);
          }
        });
      }
    }

    return {

      addMarkerListener: function(marker, event, fn ){
        google.maps.event.addListener(marker, event, fn )
      },
      addMapListener: function(event, fn){

        self.getMap()
        .then(
          function(map){
            console.log('adding map listener', event)
            google.maps.event.addListener(map, event, fn )
          }
        )
      },
      clearMapMarker: function(marker){
        marker.setMap(null);  
      },
      closeInfoWindow: function(infoWindow, marker){
        self.getMap()
        .then(
          function(map){
            infoWindow.close(map, marker);
        });
      },
      createBox: function(coords, distance){
        var getCoords = function(coords, brng, distance){
          var results = {};
          var R = 3959; //Earth radius in miles
          var lat1 = coords.lat  * Math.PI / 180;
          var lon1 = coords.lng  * Math.PI / 180;
          var bearing = brng * Math.PI / 180;
          var lat2 = Math.asin( Math.sin(lat1)*Math.cos(distance/R) +
                              Math.cos(lat1)*Math.sin(distance/R)*Math.cos(bearing) );


          var lon2 = lon1 + Math.atan2(Math.sin(bearing)*Math.sin(distance/R)*Math.cos(lat1),
                                   Math.cos(distance/R)-Math.sin(lat1)*Math.sin(lat2));
          lon2 = (lon2+3*Math.PI) % (2*Math.PI) - Math.PI; // normalise to -180..+180Â°
          results.lat = lat2 * 180 / Math.PI;
          results.lng = lon2 * 180 / Math.PI;
          return results;
        };
        return {nw: getCoords(coords,-45, distance), se: getCoords(coords,135, distance)};

      },
      getCenter: function(){
        return self.getMap()
        .then(
          function(map){

            var position = map ?  map.getCenter() : self.newLatLng( 47.6097,-122.3331)  ;
            return {lat:position.lat(), lng:position.lng() };
        });
      },
      getBoundingBox: function(coords, distance){
        //distancs in miles
        //coords {lat:1, lng:1}
        var that = this;
        var within = function(box, coords){
         return ( box && box.nw.lat  >=  coords.lat && coords.lat >= box.se.lat &&
         box.nw.lng  <=  coords.lng && coords.lng <= box.se.lng );
        };
        if(self.boundingBox && !within(self.boundingBox, coords)){
          self.boundingBox = that.createBox(coords, distance);
        } else if(!self.boundingBox){ self.boundingBox = that.createBox(coords, distance); }
        return self.boundingBox ;
      },
      getPosition: function(marker){

        return {
          lat: marker.getPosition().lat(),
          lng: marker.getPosition().lng()
        };

      },
      loadMap: function(){
        self.initializeOrGetMap()
      },

      newInfoWindow: function(options){
        return new google.maps.InfoWindow(options);
      },
      newLatLng: function(latitude, longitude){ 
        return new google.maps.LatLng(latitude, longitude)
      },
      newMapMarker: function(options){
        var that = this;
        var position = options.position;
        return self.getMap()
        .then( function(map){
          options.map = map;
          var latlng = that.newLatLng( position.lat, position.lng );
          options.position = latlng; 
          return new google.maps.Marker(options);
        });
      },
      openInfoWindow: function(infoWindow,marker){
        self.getMap()
        .then(
          function(map){
            infoWindow.close(map, marker);
        });
      },
      panTo: function(latlng){
        var that = this;
        self.getMap()
        .then(function(map){ map.panTo(that.newLatLng(latlng.lat, latlng.lng ));})  
      },

      panToMarker: function( marker ){
        var that = this;    
        that.panTo( that.getPosition(marker) ) 
      },

      resizeMap: function(){
        return self.getMap()
        .then( function(map){
          return $q(function(resolve, reject){
            $timeout( function(){
                if(map){
                  google.maps.event.trigger(map,'resize');
                  resolve()
                } else { reject(new Error('no map defined')) }
            },0)
          });
        });
      },
      removeMapListener: function(){
        throw new Error('not implemented')
      },
      setInfoContent: function(marker, content){
        //marker is not a google marker
        marker.infowindow.setContent(content);
      },
      setZoom: function(){
        throw new Error('not implemented')
      },
      setMapMarker: function(marker){
        return self.getMap()
        .then( function(map){
         marker.setMap(map); } )
      },
      triggerMarkerEvent: function(marker, event){
        google.maps.event.trigger(marker, event);
      },

    };
  }
]);

}).call(this);
