(function() {
  var factories;

  factories = angular.module('factories');

  factories.factory('MapsService',[ '$timeout', '$q', function($timeout, $q) {
      //TODO make all of these promises that wait 
      // if the map is not initialized

      return {

        mapStatus: 'new',
        queue: [],

        addMarkerListener: function(marker, event, fn ){
          google.maps.event.addListener(marker, event, fn )
        },
        addMapListener: function(map, event, fn){
          google.maps.event.addListener(map, event, fn )
        },
        createBox: function(coords, distance){
          var getCoords = function(coords, brng, distance){
            var results = {};
            var R = 3959; //Earth radius in miles
            var lat1 = coords.lat  * Math.PI / 180;
            var lon1 = coords.lon  * Math.PI / 180;
            var bearing = brng * Math.PI / 180;
            var lat2 = Math.asin( Math.sin(lat1)*Math.cos(distance/R) +
                                Math.cos(lat1)*Math.sin(distance/R)*Math.cos(bearing) );


            var lon2 = lon1 + Math.atan2(Math.sin(bearing)*Math.sin(distance/R)*Math.cos(lat1),
                                     Math.cos(distance/R)-Math.sin(lat1)*Math.sin(lat2));
            lon2 = (lon2+3*Math.PI) % (2*Math.PI) - Math.PI; // normalise to -180..+180Â°
            results.lat = lat2 * 180 / Math.PI;;
            results.lon = lon2 * 180 / Math.PI;
            return results;
          };
          console.log('32 ')
          return {nw: getCoords(coords,-45, distance), se: getCoords(coords,135, distance)};

        },
        getCenter: function(map){
          var self = this;
          var position = map ?  map.getCenter() : self.newLatLng( 47.6097,-122.3331)  ;
          return {lat:position.lat(), lng:position.lng() }
        },
        getBoundingBox: function(coords, distance){
          //distancs in miles
          //coords {lat:1, lng:1}
          var self = this;
          var within = function(box, coords){
           return ( box && box.nw.lat  >=  coords.lat && coords.lat >= box.se.lat &&
           box.nw.lon  <=  coords.lon && coords.lon <= box.se.lon );
          };
          if(self.boundingBox && !within(self.boundingBox, coords)){
            self.boundingBox = self.createBox(coords, distance);
          } else if(!self.boundingBox){ self.boundingBox = self.createBox(coords, distance); }
          return self.boundingBox ;
        },
        getPosition: function(marker){

          return {
            lat: marker.getPosition().lat(),
            lng: marker.getPosition().lng()
          };

        },
        getMap: function(){
          var self = this;
          var deferred = $q.defer()
          self.queue.push(deferred);
          if(self.mapStatus != 'loading'){
            self.initializeOrGetMap()
            .then(
              function(map){
                while(self.queue.length > 0){
                  var def = self.queue.pop();
                  def.resolve(map)
                }
            });
          }
          return deferred.promise;
        },
        initializeOrGetMap: function(){
          self = this;
          return $q( function(resolve, reject){
            if(self.map){
              resolve(self.map)
            } else {
              self.mapStatus = 'loading';
              var center = LocalService.getJSON('mapcenter') ||  {lat: '47.6097' , lng: '-122.3331' };
              google.load("maps", "3.21", {other_params:'key=AIzaSyC9wZTqNMPxl86PtJuR4Dq3TzS_hByOs3U',
                callback: function(){
                  map = new google.maps.Map(document.getElementById('google-map'), {
                    center: center ,
                    zoom: 15
                  }),
                  google.maps.event.addListenerOnce(map, "idle", function() {
                    self.map = map;
                    self.mapStatus = 'loaded'
                    resolve(map)
                  });
                }
              });
            }
          })
        },

        newInfoWindow: function(options){
          return new google.maps.InfoWindow(options);
        },
        newLatLng: function(latitude, longitude){
          return new google.maps.LatLng(latitude, longitude)
        },
        newMapMarker: function(options){
          return  new google.maps.Marker(options);
        },
        panTo: function(map, latlng){
          //note consider using promise here
          var self = this;
          map.panTo(self.newLatLng(latlng.lat, latlng.lon ));
        },
        panToMarker: function(map, marker ){
          var self = this;
          self.panTo(map, self.getPosition(marker) )
        },
        resizeMap: function(map){
          return $q(function(resolve, reject){
            $timeout( function(){
                if(map){
                  google.maps.event.trigger(map,'resize');
                  resolve()
                } else { reject(new Error('no map defined')) }
            },0)
          });
        },
        removeMapListener: function(){
          throw new Error('not implemented')
        },
        setInfoContent: function(marker, content){
          //marker is not a google marker
          marker.infowindow.setContent(content);
        },
        setZoom: function(){
          throw new Error('not implemented')
        },
        setMapMarker: function(marker, map){
          marker.setMap(map);
        },
        triggerMarkerEvent: function(marker, event){

          google.maps.event.trigger(marker, event);
        },

      };
    }
  ]);

}).call(this);
