(function() {
  var factories;

  factories = angular.module('factories');

  factories.factory('MarkerService', [
    '$http','LocalService','MapsService', '$resource', '$rootScope', '$q',
     function($http,LocalService,MapsService,$resource, $rootScope, $q) {
      var Marker;
      Marker = $resource('/api/posts/:id', {
        id: '@id'
      });
      Marker.prototype.showEdit = function() {
        var self = this
        return (self.creator && self.currentUser &&
          self.creator === self.currentUser)};
      Marker.prototype.showDib = function() {
        var self = this
        return ( !self.showEdit() && !self.isCurrentDibber && self.dibbable )};
      Marker.prototype.showUnDib = function() {
        var self = this
        return self.isCurrentDibber ? true : false };
      Marker.prototype.editProperties = function(){
        return [  'category',
                  'description',
                  'latitude',
                  'longitude',
                  'published',
                  'title'
                ];
      };
      return {
        editProperties: [
          'id',
          'category',
          'description',
          'image_url',
          'latitude',
          'longitude',
          'on_the_curb',
          'published',
          'title'
        ],
        markers: {},
        icons: {
            standard:'<%= asset_path('blue-circle.png')%>',
            dibber: '<%= asset_path('my-want.png')%>',
            creator:'<%= asset_path('my-marker.png')%>',
            moving: '<%= asset_path('green-pin.png')%>',
            giveStuff: '<%= asset_path('pin.svg')%>'
          },
        categories:[
          'Arts & Crafts',
          'Books, Games, Media',
          'Building & Garden Materials',
          'Clothing & Accessories',
          'Electronics',
          'Furniture & Household',
          'General',
          'Kids & Babies',
          'Recreation'
        ],

        clearMarkers: function( exception ){
          var self = this;
          angular.forEach(self.markers, function(value, key) {
             if (key !== exception && value.marker ){
              MapsService.clearMapMarker(value.marker)
             } else if (value.marker){  MapsService.setMapMarker(value.marker) }
          });
        },
        clearWindows: function(exception, map){
          var self = this;
          angular.forEach(self.markers, function(value, key) {
            if (String(key) !== String(exception)) {
              if (value.infowindow && value.marker) {
                return MapsService.closeInfoWindow(value.infowindow, value.marker);
              }
            } else {
              return MapsService.openInfoWindow(value.infowindow, value.marker);
            }
          });
        },

        contains: function(object, attributes){
          var contains = false;
          angular.forEach(attributes, function(attribute){
            angular.forEach(attribute, function(value, attr){
              if(object.hasOwnProperty(attr) && object[attr] === value){
               contains = true;
              }
            });
          });
          return contains;

        },
        isEmpty: function(obj){
          // null and undefined are "empty"
          var self = this;
          if (!obj) return true;
          if (obj.length === 1 && self.isEmpty(obj[0]) )   return true;
          if (obj.length > 0 )    return false;
          if (obj.length === 0)  return true;
          for (var key in obj) {
              if (hasOwnProperty.call(obj, key)) return false;
          }
          return true;
        },
        saveLocal: function(marker){
          var self = this;
          if(!marker.temporary){
            var cached =  LocalService.getJSON('markers') || {};
            var data = {};
            angular.forEach(self.editProperties, function(value){
              if(marker[value]){
                data[value] = marker[value]
              }
            });
            cached[marker.id] = data;
            LocalService.set('markers', JSON.stringify(cached))
         }
        },
        delete: function(marker){
          //REVIEW is this being used anywhere?
          self = this;
          var cached = JSON.parse( LocalService.get('markers')) || {};
          delete cached[marker.id];
          delete self.markers[marker.id];
          LocalService.set('markers', JSON.stringify(cached) )
        },
        setAll: function(has, doesnot){
          var self = this;
          angular.forEach( self.where(has, doesnot), function(marker){
            if(marker.marker){
              MapsService.setMapMarker(marker.marker)
            }
          });
        },

        setGoogleMarker: function(marker){
          var defer = $q.defer();
          var self = this;
          if(!marker.marker ) {
            MapsService.newMapMarker({
              icon: self.icons[marker.icon] || self.icons.standard,
              draggable: marker.draggable,
              position: { lat: marker.latitude, lng: marker.longitude },
              title: marker.description
            }).then(function(gmarker){ 
              self.markers[marker.id].marker = gmarker
              MapsService.addMarkerListener(gmarker, 'click', function(){
                $rootScope.$broadcast('detailsWanted', {
                      markerId: marker.id
                  });
              } )
              defer.resolve(gmarker);
            })
          } else { defer.resolve(marker.marker) }
          return defer.promise; 
        },

        updateMarker: function(id,map) {
          var defer = $q.defer();
          setTimeout(function(){
            $q.reject('timeout')
          })
          var self;
          self = this;
          return Marker.get({
            id: id
          }).$promise.then(function(post) {
            if (post.post.originalImage === 'missing') {
              if (self.markers[id]) {
                post.post.originalImage = self.markers[id].originalImage;
                post.post.image_url = self.markers[id].image_url;
              } else {
                post.post.originalImage = '<%= asset_path('processing.png')%>';
                post.post.image_url = '<%= asset_path('processing.png')%>';
              }
              defer.resolve('marker updated')
            }
            self.setMarker(post.post, map)
            defer.resolve('marker updated')
            return defer.promise;
          });
        },
        updateWindow: function(id) {
          var infowindow, innerContent, marker, self;
          self = this;
          marker = self.markers[id];
          innerContent = "<div > <div id='siteNotice' class='stuff-map-image'></div> <img src=" +
           marker.image_url + " width='200px' ></img> <div id='bodyContent'> <p>" +
           marker.description + "</p> </div> </div> </div>";
          if (!marker.description) {
            marker.description = "";
          }
          if (!marker.infowindow) {
            infowindow = MapsService.newInfoWindow({
              content: innerContent
            });
            return marker.infowindow = infowindow;
          } else {
            return MapsService.setInfoContent(marker, innerContent);
          }
        },


        setMarker: function(marker){
          var self = this;
          marker.updated_at = new Date(marker.updated_at);
          marker.locallyUpdated = Date.now();
          if(!self.markers[marker.id]){
            self.markers[marker.id] = new Marker(marker);
          } else { angular.extend(self.markers[marker.id], marker ) }
          self.saveLocal( self.markers[marker.id] )
          return self.setGoogleMarker(self.markers[marker.id]);
        },

        where: function(has, doesnot){
          var self = this;
          if (has && has.constructor  !== Array){
            var has = [has];
          }
          var results = [];
          angular.forEach(self.markers,
            function(value ){
              if(self.contains(value,has) && !self.contains(value, doesnot)){
                results.push(value)
              } else if ( !self.contains(value, doesnot) && self.isEmpty(has) ) {  //TOFIX
                results.push(value);
              }
            }
          );
          results.sort(function (a, b) {
            return (a['updated_at'] < b['updated_at'] ? 1 : -1);

          });
          return results;
        }
      };
    }
  ]);

}).call(this);
