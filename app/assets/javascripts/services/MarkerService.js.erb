(function() {
  var factories;

  factories = angular.module('factories');

  factories.factory('MarkerService', [
    '$http', '$resource', '$rootScope', function($http, $resource, $rootScope) {
      var Marker;
      Marker = $resource('/api/posts/:id', {
        id: '@id'
      });
      Marker.prototype.showEdit = function() {
        var self = this
        return (self.creator && self.currentUser &&
          self.creator === self.currentUser)};
      Marker.prototype.showDib = function() {
        var self = this
        return ( !self.showEdit() && !self.isCurrentDibber && self.dibbable )};
      Marker.prototype.showUnDib = function() {
        var self = this
        return self.isCurrentDibber ? true : false };
      Marker.prototype.editProperties = function(){
        return [  'category',
                  'description',
                  'latitude',
                  'longitude',
                  'published',
                  'title'
                ];
      };
      return {
        editProperties: [
          'category',
          'description',
          'latitude',
          'longitude',
          'on_the_curb',
          'published',
          'title'
        ],
        markers: {},
        map: null,
        icons: {
            standard:'<%= asset_path('blue-circle.png')%>',
            dibber: '<%= asset_path('my-want.png')%>',
            creator:'<%= asset_path('my-marker.png')%>',
            moving: '<%= asset_path('green-pin.png')%>',
            new: '<%= asset_path('pin.svg')%>'
          },
        categories:[
          'Arts &amp; Crafts',
          'Books, Games, Media',
          'Building &amp; Garden Materials',
          'Clothing &amp; Accessories',
          'Electronics',
          'Furniture &amp; Household',
          'General',
          'Kids &amp; Babies',
          'Recreation'
        ],
        setGoogleMarker: function(marker){
          if(!marker.marker) {
            var self = this;
            var latLng = new google.maps.LatLng(marker.latitude, marker.longitude);
            var options = {
              zoom: 4,
              center: latLng
            };
            marker.marker = new google.maps.Marker({
              icon: self.icons.standard,
              position: latLng,
              map: self.map,
              title: marker.description
            });
          }
          return google.maps.event.addListener(marker.marker, 'click', function() {
            $rootScope.$broadcast('detailsWanted', {
              markerId: marker.id
            });
          });
          return marker;
        },

        updateMarker: function(id, origin, callback) {
          var self;
          self = this;
          return Marker.get({
            id: id
          }).$promise.then(function(post) {
            if (post.post.originalImage === 'missing') {
              if ($scope.markers[id]) {
                post.post.originalImage = $scope.markers[id].originalImage;
                post.post.image_url = $scope.markers[id].image_url;
              } else {
                post.post.originalImage = '<%= asset_path('processing.png')%>';
                post.post.image_url = '<%= asset_path('processing.png')%>';
              }
            }
            self.setMarker(post.post)
            if (origin !== 'marker') {
              google.maps.event.trigger(self.markers[id].marker, 'click');
            }
            return callback();
          });
        },
        updateWindow: function(id) {
          var infowindow, innerContent, marker, self;
          self = this;
          marker = self.markers[id];
          innerContent = "<div > <div id='siteNotice' class='stuff-map-image'></div> <img src=" + marker.image_url + " width='200px' ></img> <div id='bodyContent'> <p>" + marker.description + "</p> </div> </div> </div>";
          if (!marker.description) {
            marker.description = "";
          }
          if (!marker.infowindow) {
            infowindow = new google.maps.InfoWindow({
              content: innerContent
            });
            return marker.infowindow = infowindow;
          } else {
            return marker.infowindow.setContent(innerContent);
          }
        },
        setMap: function(map) {
          var self;
          self = this;
          self.map = map;
        },

        setMarker: function(marker){
          var self;
          self = this;
          marker.updated_at = new Date(marker.updated_at);
          marker.locallyUpdated = Date.now();
          if(!self.markers[marker.id]){
            self.markers[marker.id] = new Marker(marker);
          } else { angular.extend(self.markers[marker.id], marker ) }
          self.setGoogleMarker(self.markers[marker.id]);
        }
      };
    }
  ]);

}).call(this);
